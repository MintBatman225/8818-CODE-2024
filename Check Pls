// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

package frc.robot;


import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.PneumaticsModuleType;
import edu.wpi.first.wpilibj.Servo;

import edu.wpi.first.cameraserver.CameraServer;
import edu.wpi.first.util.sendable.Sendable;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.motorcontrol.PWMSparkMax;
import edu.wpi.first.wpilibj.motorcontrol.Victor;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.CommandScheduler;

import edu.wpi.first.wpilibj.Timer;


// importing our command class



/** This is a demo program showing how to use Mecanum control with the MecanumDrive class. */
public class Robot extends TimedRobot {
 private static final String kDefault = "Default";
 private String  m_autoSelected;
 private final SendableChooser<String>m_chooser = new SendableChooser<>();



  Victor frontLeft = new Victor(4);
  Victor frontRight = new Victor(1);
  Victor rearLeft = new Victor(3);
  Victor rearRight = new Victor(5);
  PWMSparkMax Backintake = new PWMSparkMax(2);
  PWMSparkMax Upperintake = new PWMSparkMax(6);
  PWMSparkMax ShooterU = new PWMSparkMax(7); 
  Servo exampleServo1 = new Servo(9);
  private final SendableChooser<String>m_Chooser = new SendableChooser<>();
private final DoubleSolenoid m_doubleSolenoid = new DoubleSolenoid(PneumaticsModuleType.REVPH, 1, 2); //private final Compresser m_compressor = new Compresser(PneumaticsModuleType.REVPH)  
  
private final Timer timer1 = new Timer();



  private Command m_autonomousCommand;



  @Override
  public void robotInit() {
    m_chooser.setDefaultOption("Default Auto", kDefault);

    SmartDashboard.putData("Auto choices", m_chooser);

    frontLeft.setInverted(true);
    frontRight.setInverted(false);
    ShooterU.setInverted(true);

    timer1.start();
  }


// assign motors to their ports
  CameraServer.startAutomaticCapture();

  


  @Override
  public void robotPeriodic() {
 
    CommandScheduler.getInstance().run();
  }

  /** This function is called once each time the robot enters Disabled mode. */
  @Override
  public void disabledInit() {}

  @Override
  public void disabledPeriodic() {}

  /** This autonomous runs the autonomous command selected by your {@link RobotContainer} class. */
  @Override
  public void autonomousInit() {

        m_autoSelected = m_chooser.getSelected();
      
      // m_autoSelected = SmartDashboard.getString("Auto Selector", kDefaultAuto);
      System.out.println("Auto selected: " + m_autoSelected);
  
      timer1.reset();
  }
}
  
    m_autonomousCommand = null;
    m_autoSelected = m_chooser.getSelected();

    
    // m_autoSelected = SmartDashboard.getString("Auto Selector", kDefaultAuto);
    m_chooser.setDefaultOption("Default", kDefault);
    SmartDashboard.putData("Auto choices", m_chooser);

    frontLeft.setInverted(true);
    frontRight.setInverted(false);
    ShooterU.setInverted(true);

    timer1.start();
  }


    // schedule the autonomous command (example)

  /** This function is called periodically during autonomous. */
  @Override
  public void autonomousPeriodic() {
     (m_autoSelected); {
         kdefault:
          if(timer1.get() < 2.0){  //flicking note into shooter
          }
          else if(timer1.get() < 5.0){  //turn on feedwheel to launch note
            ShooterU.set(.98);
          }
          else if(timer1.get() < 6.5){  //back up
            ShooterU.set(0);
            frontLeft.set(.4);
            rearLeft.addFollower(frontLeft);
            frontRight.set(.4);
            rearRight.addFollower(frontRight); 
          }
          else if(timer1.get() < 7.5){  //turning
            frontLeft.set(-.4);
            rearLeft.addFollower(frontLeft);
            frontRight.set(.4);
            rearRight.addFollower(frontRight); 
          }
          else if(timer1.get() < 9.5){
            frontLeft.set(.5);
            rearLeft.addFollower(frontLeft);
            frontRight.set(.5);
            rearRight.addFollower(frontRight);
          }
          else{  //turn off all motors
            ShooterU.set(0);
            frontLeft.set(0);
            rearLeft.addFollower(frontLeft);
            frontRight.set(0);
            rearRight.addFollower(frontRight);
          } 
          break; 
        }
      }



  @Override
  public void teleopInit() {
    // This makes sure that the autonomous stops running when
    // teleop starts running. If you want the autonomous to
    // continue until interrupted by another command, remove
    // this line or comment it out.
   
  }

  /** This function is called periodically during operator control. */
  @Override
  public void teleopPeriodic() {
   

   
    XboxController controller1 = new XboxController(0);
    XboxController controller2 = new XboxController(1);


   
 
    //Driving controls (including strafe)
    if(controller1.getLeftBumper()){
      m_doubleSolenoid.set(DoubleSolenoid.Value.kForward);
      m_doubleSolenoid.set(DoubleSolenoid.Value.kReverse);
      frontLeft.set(1);
      rearLeft.set(-1);
      rearLeft.setInverted(true);
      frontRight.set(1);
      frontRight.setInverted(true);
      rearRight.set(-1);
     
       
      } else if(controller1.getRightBumper()){
       
        frontLeft.set(-1);
        rearLeft.set(1);
        frontLeft.setInverted(true);
        frontRight.set(-1);
        rearRight.setInverted(true);
        rearRight.set(1);
      } else {
      frontLeft.set(controller1.getLeftY());
      rearLeft.set(controller1.getLeftY());
      frontRight.set(-controller1.getRightY());
      rearRight.set(-controller1.getRightY());
      }
      //-----------------------------------------------------

        //Backintake (intaking) Upperintake (intaking)
      if(controller2.getBButton()){
        Backintake.set(.9);
        Upperintake.set(.7);
      } else if(controller2.getAButton()){
        Backintake.set(0);
        Upperintake.set(0);
      }
      //----------------------------------------------------

       //Controls both shooters//
      if(controller1.getYButton()){
        ShooterU.set(1);
      }
      if(controller1.getXButton()){
        ShooterU.set(0);
      }
     // Flicker Program//
      if (controller2.getYButton()){
        exampleServo1.setPosition(1);
    
      } else if(controller2.getXButton()){
        exampleServo1.setPosition(0.3);
      
      } else {
        exampleServo1.setPosition(0.5);
       }
      }


   






  
   
 

  
  @Override
  public void testInit() {
    // Cancels all running commands at the start of test mode.
    CommandScheduler.getInstance().cancelAll();
  }

  /** This function is called periodically during test mode. */
  @Override
  public void testPeriodic() {}
}
